/**
@page todolist Project to-do list


LHAPDF6 TODO list
=================

VERSION 6.0.6 (alpha_s tweaks)
------------------------------

- **Separate AlphaS_QThresholdB etc. from M<qname> (AB/KN)**

   Requested by Alex Mitov.

- **Use alpha_s ipol subgrids on thresholds when building an ipol from the ODE solver (KN)**

   Need a flag, or do this all the time? My inclination is to do it all the time.

- **Provide optional override AlphaS_FlavorScheme and AlphaS_NumFlavors (AB)**


VERSION 6.1
-----------

- **Speed up interpolation (MR)**

   Many studies already

   Report of 6.0.4 slowness relative to LHAPDF5 (on CT10). Weird, we tested this
   at version 6.0.0 and it was outperforming LHA5. Maybe it is slower for CT10
   and ~same for CT10nlo. Juan reports that the NNPDF functions are faster.

   Possible speed-ups: caching the last log(x) and log(Q2) values, caching grid
   index lookup, caching interpolation weights, using a
   native array implementation in place of Boost::multiarray, doing a faster
   hybrid search in the grids, GCC builtins for SSE auto-vectorisation.

   Martin has got some speed-up out of a native array implementation, and found
   no benefit of changing the index search. Andy will look into caching.

- **Handle zipped PDF .dat files (AB)**

   Prefer zipped single member data files rather than virtual filesystem access
   to the tarball? Should be able to read zipped if a .dat.zip file is found,
   otherwise fall back to the unzipped .dat. zless can be used to read the
   contents with minimal overhead.

- **Add a GlobalID metadata member, for the LHAPDF/PDFLIB ID code**

   The pdfsets.index file can then be regularly generated from the set .info
   files (and include the latest available DataVersions)

- **Add helper functions for calculating PDF errors on observables (GW, others)**

   Certainly a good thing to provide an example for... maybe it should just be
   provided as an example? One nice thing is that since we now store a clear
   ErrorType metadata entry for each PDF set, working out the appropriate error
   treatment should be easy (I think it's best to not use words like
   "infallible"!)

- **Remove remaining Boost dependencies? (AB)**

   Boost was being more trouble than it was worth, but maybe now that we're not
   using the filesystem stuff it is ok. Full removal would require several changes:
   - multiarray: replace with Martin's array/SSE code
   - foreach: iterators or require C++11
   - lexical_cast: stringstream wrappers to_str, from_str (and C++11)
   - shared_ptr: manual deletes or require C++11
   - bind: C++11 or something less cool

- **Respond to Mark Sutton's suggestions re. the PDF base class (AB)**

   I'd like to avoid an extra layer of inheritance: maybe we should just move
   some current functions from PDF -> GridPDF if they are really inappropriate.
   And is it really LHAPDF's responsibility to define a base class suitable for
   ~all PDF applications?  If we do modify the API, it would be good to plan for
   photon and nuclear PDF effects on the API in the same interface iteration, if
   possible. Discuss...

- **Add/move the cteq6ll aliasing to mkPDF/mkPDFs/getPDFSet functions?**

   For backward compatibility. Drop this aliasing with version 6.1, when people
   will have had time to adapt? Or 6.2, along with LHAPDF5 C++ functions?


VALIDATION / MIGRATION
----------------------

- **Put all (central) validation plot PDFs on Web (AB)**

   Decrease the threshold a bit and run over all central PDFs.

- **ABM PDF approval**

   Need to contact Segei Alekhin.

- **CTEQ PDF approval (AB)**

   Pavel Nadolsky and Jon Pumplin contacted.

- **NNPDF2.3 MC and FFN and QED PDF validation (AB, NNPDF)**

   Juan, Stefano, Maria are checking the MC and FFN sets and will submit the new
   QED sets (NLO and LO).

- **ATLAS PDFs (AB, ATLAS)**

   Sasha, Voica, Mark to provide and approve: contacted.

- **MRST PDF validation (AB,GW)**

   2004QED, LO* and LO**

   Approval needed by Robert et al: contacted.

- **MSTW2008 PDF validation (AB)**

   Approval needed by Graeme, Robert et al: contacted.

- **HERAPDF validation (SL,AB)**

   Mandy (and others) contacted for approval.


WRITE PAPER
-----------

- ** Target at EPJC Tools or CPC?**

   Can put on arXiv before October, but delay publication submission to aim
   (hope) for for eligibility in *next* UK REF.

- **Note fixed problems**

   Support for different set sizes. alpha_s etc. in multi-set mode. Lambda
   reporting to PYTHIA. Number of members reported correctly. **ADD MORE AS WE REMEMBER THEM**


VERSION 6.1.1
-------------

- **PDF flavor aliasing mechanism**

   e.g. allow anti-flavours to be identical without duplicating their grids in
   the data files or memory. How could we implement this?

- **Expose LHAGLUE slots system for C++ use**

   Automatic memory management can be nice for everyone.

- **Speed up interpolation with GPUs**

   Interpolation of PDFs seems like an potential use case for GPUs, since it's
   normal to query for all partons in the set at once: if we can load the
   relevant ipol anchors for all flavours onto the GPU then we can maybe get a
   substantial speedup. OpenMP did not particuarly help, from quick tests.

- **Improved PDF extrapolator**

   Keep extrapolating linearly outside the range (in log space)? Graeme suggests
   a particular form of extrapolation at low-Q established from the anomalous
   dimension of the function within the grid at that point. Freezing the value
   may be more appropriate at high-Q. High-x should not require extrapolation,
   but gradient extrapolation in log space may be a good option at low-x.

- **Provide a nicer Fortran interface?**

   Surely something nicer than the LHAPDF5 API can be made? Fortran isn't going
   away from the the theory world.

- **Improved x -> 1 evolution (GW,...)**

   Graeme, etc.: x -> 1 extrapolation should be done carefully to ensure that
   all PDFs -> 0 at x = 1.0, (usually) without going negative. This probably
   deserves specialisation beyond generic splines. Graeme will look at what's
   done in the CTEQ code (other than interpolating in x**0.3)

- **Add AlphaS mappings to Cython (SL, AB)**

   And alphasQ(q) etc. to PDF, plus 2-arg versions of xfxQ(x, q) etc.

- **Add debug verbosity about places being searched for PDF files**

- **Translate C++ exceptions into Python exceptions**

   Should be happening automatically -- Cython bug? There is a real, definite
   Cython bug re. exception declarations on functions that return references,
   so the exception declarations on getPDFSet() etc. are commented for now.


AS AND WHEN
-----------

- **Allow use of valence/sea etc. decompositions**

   GridPDF may be inherited from to allow the returned values to be built from
   separate interpolations of component PDFs such as interpolated valence, sea,
   or difference PDFs that are combined to make the physical ones. The PDG ID
   code range for "generator specific" applications may be used, but we'll need
   to bear in mind that this will mean that the flavor ID list has different
   meanings and contents for internal and external purposes: maybe the
   "internal" PDG ID list needs to become part of the grid data header, or can
   the metadata be used?

- **Optimize the grid PDF interpolator code a bit more**

   Cache log(x), log(Q) between samplings -> log() still accounts for 15% of
   CPU: can reduce by factor of 13 in some use cases (only one call for a whole
   flavour interpolation set at the same point). Below threshold? Sherpa already
   report performance increases due to being able to interpolated one flavour at
   a time, so perhaps this use case is not valid in all generators and could be
   a more complexity than it is worth.

- **More aggressive memory and CPU optimisation**

   For example avoiding duplication of x,Q knot arrays between flavors... if
   this "1D" effect is really significant.

- **Support photon structure functions**

   Need to make use of the P2 and IP2 params. No idea how to even start here...

- **Support nuclear corrections**

   Have to be applyable to all nucleon PDFs, regardless of implementation:
   probably nuclear PDFs will inherit from PDF (since they are PDFs) and
   _contain_ a nucleon PDF whose values will be modified before returning.

- **Using std::/boost::function to generically modify the interpolation measures in x, Q (AB)**

- **Use Autoconf's more robust FC_* Fortran function name macros?**

   This would require testing for a Fortran compiler, which we would rather not
   do... Test for a Fortran compiler unless told not to build LHAGLUE? **These
   things arguably cause as many problems as they solve!**

- **Separate the x and Q2 inter/extrapolation?**

   Allow mix & match combinations. Would this simplify the code since the
   1D interpolation methods are very simple and the 2D is built from them?

- **Make GridPDFs not read their info or data blocks until an xf value is requested?!**

   Super-laziness! But is there a real gain other than ~1 sec initialization speed?

- **Use HDF5 for the data access?**

   David has more info: I've only ever looked at it in a very rudimentary way,
   e.g. playing with PyTables. Sounds good in principle: I prefer a *real world*
   standard to ROOT, anyway ;-) Does it have any string/typed annotation
   mechanism that we could use?

- **Updated Octave wrapper**

   To come from Phil Ilten

*/
